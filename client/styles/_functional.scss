/* ACCESSIBILE FUNCTIONAL CLASSES
 * ========================================================================== */

.accessibility-links {
	position: relative;
	list-style: none;
	padding: 0;
	margin: 0;
	z-index: 1000;
}

	.accessibility-links li {
		position: absolute;
		top: -18px;
		left: 0;
	}

	.accessibility-links a,
	.accessibility-links a:link,
	.accessibility-links a:visited {
		position: absolute;
		margin-left: -9999px;
		width: 161px;
	}

		.accessibility-links a:hover,
		.accessibility-links a:focus,
		.accessibility-links a:active {
			margin-left: 0;
		}

.inline-accessible {
	position: absolute;
	left: -9999px;
	display: block;
	margin-bottom: 14px;
}

	.inline-accessible:hover,
	.inline-accessible:focus,
	.inline-accessible:active {
		position: static;
		left: auto;
	}

/* H5BP FUNCTIONAL CLASSES
 * ========================================================================== */

/*
 * Image replacement
 * Instructions: https://github.com/h5bp/html5-boilerplate/commit/adecc5da035d6d76b77e3fa95c6abde841073da2
 */

.ir {
	background-color: transparent;
	border: 0;
	overflow: hidden;
	/* IE 6/7 fallback */
	*text-indent: -9999px;
}

.ir:before {
	content: "";
	display: block;
	width: 0;
	height: 100%;
}

/*
 * Hide from both screenreaders and browsers: h5bp.com/u
 */

.hidden {
	display: none !important;
	visibility: hidden;
}

/*
 * Hide only visually, but have it available for screenreaders: h5bp.com/v
 */

.vh,
.vhidden,
.visuallyhidden {
	@include visuallyhidden();

	/*
	 * Extends the .vhidden class to allow the element to be focusable
	 * when navigated to via the keyboard: h5bp.com/p
	 */
	&.focusable:active,
	&.focusable:focus {
		@include undovisuallyhidden();
	}
}

.supports-js .js-hidden {
	display: none;
}

.supports-no-js .no-js-hidden {
	display: none;
}

/*
 * Hide visually and from screenreaders, but maintain layout
 */

.invisible {
	visibility: hidden;
}

/* CLEARFIX
/* Apply the cf code to the included elements - means you don't need to use class cf all over the place
 * ========================================================================== */

.cf,
.clearfix {
	@include clearfix-micro();
}

/* INTRINSIC RATIO
 * ========================================================================== */

/*
<div class="intrinsic">
	<div class="intrinsic-wrap">
		<div class="intrinsic-el">
		</div>
	</div>
</div>
 */

.intrinsic {
	/*
		You just need to define width within another class on the element,
		if not a inherited by default (ie: <div/> or any class with a display: block or default width of auto or 100%)
	 */
}

.intrinsic-wrap {
	height: 0;
	position: relative;
}

.intrinsic-el {
   /*
		This class needs no further customization,
		if this class is applied to the elemtent and is contained
		within .intrinsic > .intrinsic-wrap > *current element*
		the element should scale in correct perspective
	*/

	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	position: absolute;
}

// generates class names to be added to the '.intrinsic-wrap' class
// e.g. @include intrinsic-class(16,9) creates the class '.intrinsic-16x9'
@mixin intrinsic-class($width, $height, $prefix: "intrinsic-") {

	$class-name: $prefix + $width + "x" + $height;

	.#{$class-name} {
		padding-bottom: percentage( $height / $width);
	}
}

@include intrinsic-class(16,9);
@include intrinsic-class(4,3);
